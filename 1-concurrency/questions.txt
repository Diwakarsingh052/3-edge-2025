q1. create a function work that takes a work id and print work {id} is going on
        In the main function run a loop to run work function 10 times
        make the work function call concurrent
        Make sure your program waits for work function to finish gracefully


q2. Follow up to the previous question
    Spin up one anonymous goroutine in the work function
    This goroutine prints some stuff on the screen and sleeps for 100ms
    Make sure you wait for every goroutine to finish and end everything gracefully


q3.  Make a struct Theater with the following fields: Seats(int=2), RWMutex, userName chan string.

          Create two methods over a struct

          The first method book a seat in the theater. If the seat is equal to zero, no one can book it.
          ( In the booking method, put simple print statements that show booking has been made if seats are available)
          Once the seat is booked in Theater, add the name of the user in the userName channel.

          Create a second Method, printInvoice(),  It fetches the userName from the channel and print it.

         Note:-
          Call the bookSeats & printInvoice() method as a goroutine in the main function.
          For example:-

          for i:=1; i<=3; i++ {
          u:= strconv.Itoa(i)
               go t.bookSeats(user + u)
          }
          go t.printInvoice()

          The program should quit gracefully without deadlock.