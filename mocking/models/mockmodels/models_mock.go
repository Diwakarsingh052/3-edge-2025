// Code generated by MockGen. DO NOT EDIT.
// Source: models.go
//
// Generated by this command:
//
//	mockgen -source models.go -destination mockmodels/models_mock.go -package mockmodels
//
// Package mockmodels is a generated GoMock package.
package mockmodels

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// create mocks base method.
func (m *MockDB) create(s string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "create", s)
}

// create indicates an expected call of create.
func (mr *MockDBMockRecorder) create(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "create", reflect.TypeOf((*MockDB)(nil).create), s)
}

// delete mocks base method.
func (m *MockDB) delete(id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "delete", id)
}

// delete indicates an expected call of delete.
func (mr *MockDBMockRecorder) delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "delete", reflect.TypeOf((*MockDB)(nil).delete), id)
}

// update mocks base method.
func (m *MockDB) update(id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "update", id)
}

// update indicates an expected call of update.
func (mr *MockDBMockRecorder) update(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "update", reflect.TypeOf((*MockDB)(nil).update), id)
}
